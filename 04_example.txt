[1. 영화 목록 출력하기 ]
// import logo from './logo.svg';
// import './App.css';
import React from 'react';
import Movie from './Movie/Movie';

function App() {
  const movies = [
    { title: '스타트랙', year :2001 },
    { title: '스파이더맨', year :2008 },
    { title: '콜드블루', year :2011 },
    { title: '미나리', year :2019 }
  ];
  
  return (
    <div className="App">
      <h1> 영화 목록 </h1>
      <ul>
        <li className="movie">
            <span>{movies[0].title}</span>
            <span>{movies[0].year}</span>
        </li>
        <li className="movie">
            <span>{movies[1].title}</span>
            <span>{movies[1].year}</span>
        </li>
        <li className="movie">
            <span>{movies[2].title}</span>
            <span>{movies[2].year}</span>
        </li>
        <li className="movie">
            <span>{movies[3].title}</span>
            <span>{movies[3].year}</span>
        </li>

      </ul>
    </div>
  );
}

export default App;


[2. map() 반복문 사용하기  : 영화 목록 출력하기 ]
import React from 'react';

function App() {
  const movies = [
    { title: '스타트랙', year :2001 },
    { title: '아라비카', year :2008 },
    { title: '콜드블루', year :2011 },
    { title: '미나리', year :2019 }
  ];
  
  const reanderMovies = movies.map(movie=>{
      // movies 목록 중 한개의 객체를 movie로 받아서 사용 
    return(
      <li className="movie">
          <span>{movie.title}</span>
          <span>{movie.year}</span>
      </li>
    )
  })
  return (
    <div className="App">
      <h1> 영화 목록 </h1>
      <ul>
        {reanderMovies}
      </ul>
    </div>
  );
}

export default App;

[3. 기본 : 영화 목록 출력하기 ]
import React from 'react';
function App() {
  const movies = [
    { title: '스타트랙', year :2001 },
    { title: '스파이더맨', year :2008 },
    { title: '라이언킹', year :2011 },
    { title: '미나리', year :2019 }
  ];
  const renderMovies = movies.map( movie =>{
    return(
      <li className="movie" key={movie.title}>
      // 반복제어문은 오류메시지 창을 없애기 위해 키값이 필요 
      // 그냥 넣어주면 됨 
        <span className="movie-title">{movie.title}</span>
        <span className="movie-year"> {movie.year}</span>
      </li>
    )
  })
  return (
    <div className="App">
      <h1> 영화 목록 </h1>
      <ul>
        {renderMovies }     
      </ul>
    </div>
  );
}

export default App;

[4. 컴포넌트로 분리하고 props로 데이터 전달하기 : Movie.js]
import React from 'react';

const Movie = (props) => {
    return (
       
    <li className="movie">
        <span className="movie-title">{props.movie.title}</span>
        <span className="movie-year"> {props.movie.year}</span>
    </li>

    );
};

export default Movie;

[4. 컴포넌트로 분리하고 props로 데이터 전달하기 :App.js]
import React from 'react';
import Movie from './Movie/Movie';

function App() {
  const movies = [
    { title: '스타트랙', year :2001 },
    { title: '스파이더맨', year :2008 },
    { title: '라이언킹', year :2011 },
    { title: '미나리', year :2019 }
  ];
  const renderMovies = movies.map( movie =>{
    return(
      <Movie movie= {movie} />
      // <Movie movie= {movie} key={movie.title} />
      // 반복제어문은 유일한 키가 필요함 보통 아이디를 사용하지만 title이 유일한 값이므로 title사용
      // 어떤한 값을 구분하기 위해 필요 
    )
  })
  return (
    <div className="App">
      <h1> 영화 목록 </h1>
      <ul>
        {renderMovies }     
      </ul>
    </div>
  );
}

export default App;

[5. 컴포넌트로 분리하고 props로 데이터 전달하기 : Movie.js]
//반복되는 props를 제거함 
import React from 'react';

const Movie = ({movie}) => {
    //반복되는 props를 제거함 
    return (
       
    <li className="movie">
        <span className="movie-title">{movie.title}</span>
        //반복되는 props를 제거함 
        <span className="movie-year"> {movie.year}</span>
        //반복되는 props를 제거함 
    </li>

    );
};

export default Movie;


[6-1. 폼을 이용하여 영화 목록 추가하기 ]
// 영화 목록은 state 값이 아니라 화면을 갱신하지 않음
// 콘솔에서만 확인할 수 있음  
import React, { useState, useEffect } from 'react';
import Movie from './Movie/Movie';

function App() {
  const [movieTitle, setMovieTitle] = useState('');
  const [movieYear, setMovieYear] = useState('');

  const movies = [
    { title: '스타트랙', year :2001 },
    { title: '아라비카', year :2008 },
    { title: '라이언킹', year :2011 },
    { title: '미나리', year :2019 }
  ];
  const renderMovies = movies.map( movie =>{
    return(
      <Movie movie= {movie} key={movie.title} />
    )
  })

  const addMovie = (event) =>{
    event.preventDefault();
    movies.push({
      title:movieTitle,
      year:movieYear
    });
    // 컴포넌트가 랜더링 되지 않으므로 userEffect 필요
    console.log(movieTitle, movieYear);
  }

  return (
    <div className="App">
      <h1> 영화 목록 </h1>
      <form onSubmit={addMovie}>
        <input
          type="text"
          value={movieTitle}
          placeholder="영화제목"
          onChange={e=>setMovieTitle(e.target.value)}
          /><br />
          
        <input
          type="text"
          value={movieYear}
          placeholder="개봉년도"
          onChange={e=>setMovieYear(e.target.value)}
          /><br />
        <button>영화추가</button>
      </form>
      <ul>
        {renderMovies }     
      </ul>
    </div>
  );
}

export default App;

[6-2. 폼을 이용하여 영화 목록 추가하기 : state로 목록을 수정함  ]
import React, { useState, useEffect } from 'react';
import Movie from './Movie/Movie';

function App() {
  const [movieTitle, setMovieTitle] = useState('');
  const [movieYear, setMovieYear] = useState('');

  // 배열을 state값으로 바꾸어 주고  addMovie 수정
  const [movies, setMovies] = useState( [
    { title: '스타트랙', year :2001 },
    { title: '아라비카', year :2008 },
    { title: '라이언킹', year :2011 },
    { title: '미나리', year :2019 }
  ]);

  const renderMovies = movies.map( movie =>{
    return(
      <Movie movie= {movie} key={movie.title} />
    )
  })

  const addMovie = (event) =>{
    event.preventDefault();
    setMovies([{
      title:movieTitle,
      year:movieYear
    }]);
    //기존의 데이터를 덮어쓰게 되므로 다음과 같이 개선함 
    setMovies([
      ...movies,{
      title:movieTitle,
      year:movieYear
    }]);
    // 기존의 배열에 추가함 
    // 추가 하고 폼은 비워 준다. 
    setMovieTitle('');
    setMovieYear('');
    console.log(movieTitle, movieYear);
  }

  return (
    <div className="App">
      <h1> 영화 목록 </h1>
      <form onSubmit={addMovie}>
        <input
          type="text"
          value={movieTitle}
          placeholder="영화제목"
          onChange={e=>setMovieTitle(e.target.value)}
          /><br />
          
        <input
          type="text"
          value={movieYear}
          placeholder="개봉년도"
          onChange={e=>setMovieYear(e.target.value)}
          /><br />
        <button>영화추가</button>
      </form>
      <ul>
        {renderMovies }     
      </ul>
    </div>
  );
}

export default App;

[7-1. 폼을 이용하여 영화 목록 추가하기 : 컴포넌트로 분리하기  ]
/// 컴포넌트로 분리하면 movie는 부모로
/// 자식에게 데이터를 전달하고 전달받아야함 
//  자식이 부모데이터를 어떻게 변경하는지 확인 필요
import React, { useState } from 'react';
import Movie from './Movie/Movie';
import MovieForm from './Movie/MovieForm';

function App() {
  const [movies, setMovies] = useState( [
    { title: '스타트랙', year :2001 },
    { title: '홀리데이', year :2008 },
    { title: '라이언킹', year :2011 },
    { title: '미나리', year :2019 }
  ]);

  const renderMovies = movies.map( movie =>{
    return(
      <Movie movie= {movie} key={movie.title} />
    )
  })

    // 함수를 전달할 것임 
  const addMovie = (movie) =>{
    setMovies([...movies, movie]);
    //console.log(movieTitle, movieYear);
  }

  return (
    <div className="App">
      <h1> 영화 목록 </h1>
      <MovieForm addMovie={addMovie} />
      // 함수를 props로 전달한 것임 
      <ul>
        {renderMovies }     
      </ul>
    </div>
  );
}

export default App;

[7-2. 폼을 이용하여 영화 목록 추가하기 : 컴포넌트로 분리하기  ]
import React, { useState} from 'react';

function MovieForm({addMovie}) {
  const [movieTitle, setMovieTitle] = useState('');
  const [movieYear, setMovieYear] = useState('');
  
  const onSubmit = (event) =>{
    event.preventDefault();
    addMovie({
      title:movieTitle,
      year:movieYear
    });
    setMovieTitle('');
    setMovieYear('');
    console.log(movieTitle, movieYear);
  }

  return (
   
      <form onSubmit={onSubmit}>
        <input
          type="text"
          value={movieTitle}
          placeholder="영화제목"
          onChange={e=>setMovieTitle(e.target.value)}
          /><br />
          
        <input
          type="text"
          value={movieYear}
          placeholder="개봉년도"
          onChange={e=>setMovieYear(e.target.value)}
          /><br />
        <button>영화추가</button>
      </form>
      
  );
}

export default MovieForm;

[8-1. 영화목록 삭제하기 : Movie.js ]
// 삭제버튼추가하기 
import React from 'react';

const Movie = ({movie, removeMovie}) => {
    // 영화를 삭제할 함수removeMovie()를 props로 받아옴 
    return (
       
    <li className="movie">
        <span className="movie-title">{movie.title}</span>
        <span className="movie-year"> {movie.year}</span>
        <button onClick={()=>{ removeMovie(movie.id)}}>삭제</button>
        // 삭제할 데이타의 키값을 제설정 
        // 데이타베이스에서는 자동으로 넘버링 됨 
    </li>

    );
};

export default Movie;

[8-2. 영화목록 삭제하기 : MovieForm.js 데이터 구조 변경]
const onSubmit = (event) =>{
    event.preventDefault();
    addMovie({
        id:Date.now(),  // 유니크한 데이타키값을 설정
        title:movieTitle,
        year:movieYear
    });
    setMovieTitle('');
    setMovieYear('');
    console.log(movieTitle, movieYear);
  }

[8-3. 영화목록 삭제하기 : App.js 데이터 구조 변경]
//renderMovies : 수정
// removeMovie 생성
import React, { useState } from 'react';
import Movie from './Movie/Movie';
import MovieForm from './Movie/MovieForm';

function App() {
  const [movies, setMovies] = useState( []);

  const removeMovie = (id)=>{
      setMovies(movies.filter(movie=> {return movie.id !== id;} ))
      console.log('삭제', id)
  }

  const renderMovies = movies.length ? movies.map(movie => {
    return (
      <Movie 
        movie={movie} 
        key={movie.id}
        removeMovie={removeMovie}
      />
    );
  }) : '추가된 영화가 없습니다.';

  const addMovie = (movie) =>{
    setMovies([...movies, movie]);
    //console.log(movieTitle, movieYear);
  }

  return (
    <div className="App">
      <h1> 영화 목록 </h1>
      <MovieForm addMovie={addMovie} />
      <ul>
        {renderMovies }     
      </ul>
    </div>
  );
}

export default App;

[9. 폼 validate : 추가버튼시 빈데이터인지 확인 할 것 ]
///아래 파일 백업 확인 할 것 // import logo from './logo.svg';
// import './App.css';
import React, { useState } from 'react';
import Movie from './Movie/Movie';
import MovieForm from './Movie/MovieForm';

function App() {
  const [movies, setMovies] = useState( []);

  const removeMovie = (id)=>{
      setMovies(movies.filter(movie=> {return movie.id !== id;} ))
      console.log('삭제', id)
  }

  const renderMovies = movies.length ? movies.map(movie => {
    return (
      <Movie 
        movie={movie} 
        key={movie.id}
        removeMovie={removeMovie}
      />
    );
  }) : '추가된 영화가 없습니다.';

  const addMovie = (movie) =>{
    setMovies([...movies, movie]);
    //console.log(movieTitle, movieYear);
  }

  return (
    <div className="App">
      <h1> 영화 목록 </h1>
      <MovieForm addMovie={addMovie} />
      <ul>
        {renderMovies }     
      </ul>
    </div>
  );
}

export default App;