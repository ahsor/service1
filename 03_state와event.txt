[리액트 데이터 구성요소]
props 프로퍼티 : 상위컴포넌트에서 하위 컴포넌트로 전달되는 읽기 전용 데이터
context 컨텍스트 : 부모 컴포넌트에서 생성하여 모든 자식 컴포넌트에 전달하는 데이터로 읽기 전용 데이터
state : 컴포넌트의 상태를 저장하고 변경할 수 있는 가변데이터


[state]
- 각각의 컴포넌트 안에서 전역변수처럼 사용
- 값을 저장하거나 변경할 수 있는 객체로 보통 버튼을 클릭하거나 값을 입력하는 등의 이벤트와 함께 사용.
- 함수형 컴포넌트를 사용할 수 있게 되었고 이때 hook이라는 도구를 사용한다. 
- hook은 useState()와 useEffect로 제어한다.
- 클래스형 컴포넌트를 사용할 때에는 반드시 생성자에서 초기화 하여야 한다. 
- 클래스형 컴포넌트를 사용할 때에는state를 변경할 때는 반드시 setState()를 사용해야 한다. 
- setState(), forceUpdate() 비동기로 처리되며 실행 완료시점에 화면을 바로 동기화 시킨다. 

[1-1. 인사하는 클래스 만들기 ]
import React, { useEffect, useState } from 'react';

function App() {
  const name = 'kim'
  const login = () => {
     console.log( name + '님 반갑습니다. ')
  };
  return (
    <div className="App">
      <h1> 로그인 </h1>
      <button onClick={ login }>Click</button>
      //document.getElementById('Hello').textContent = name; 
      // this.state.name = value 이렇게 직접 변경하면 render()함수를 호출하지 않으므로 
        // 화면에 보이는 state값은 바뀌기 전상태로 남는다. 

    </div>
  );
}
export default App;

[1-2. 인사하는 클래스 만들기 : useState ]
import React, { useEffect, useState } from 'react';

function App() {
  //const name = 'kim';
  const [ name, setName ] = useState('로그인'); 
  const login = () => {
     //const newName = 'kim'; 
     const newName = name === '로그인'? 'kim님 반갑습니다. ' :'로그인';
     console.log( newName);
     setName( newName );
    // 함수에서 useState 맵핑된 함수 호출 
  };
  return (
    <div className="App">
      <h1 id="Hello"> {name} </h1>
      <button onClick={ login }>Click</button>
    </div>
  );
}

export default App;

[1-3. 인사하는 클래스 만들기 :App.js ]
import React from 'react';
import Hello from './component03/Hello';

function App() {
  return (
    <div className="App">
        <Hello />
    </div>
    );
}

export default App;

[1-3. 인사하는 클래스 만들기 : Hello.js ]
import React, { Component } from 'react';

function Hello() {
    let name = "kim";
    function changeName(){
        name = name === "kim" ? "park" : "kim";
        // this.state.name = value 이렇게 직접 변경하면 render()함수를 호출하지 않으므로 
        // 화면에 보이는 state값은 바뀌기 전상태로 남는다. 

        console.log(name);
        // document.getElementById('name').innerHTML = name;
        // 도큐먼트를 갱신해야 함 
    }
    return (
        <div>
            <h1>state</h1>
            <h2 id="name"> {name} 님 반갑습니다. </h2>
            <button onClick={changeName}> changeName </button>
        </div>
    );
}

export default Hello;

[3. hook을 이용하여 함수형 컴포넌트로도 이벤트를 사용할 수 있다. ]
// https://ko.reactjs.org/docs/getting-started.html
[useState를 hook을 사용하여 수정 하기 ]
import React, { useState } from 'react';
// 임포트 참고
import { useState } from 'react';

function Hello02() {
    const [name, setName] = useState('kim');
    
    function changeName(){
        const newName = name === "jemicom" ? 'kim' : 'jemicom';
        console.log( name );
        setName(newName);
    }
    return (
        <div>
            <h1>state</h1>
            <h2 id="name"> {name} 님 반갑습니다. </h2>
            <button onClick={changeName}> changeName </button>
        </div>
    );
}

export default Hello02;

[3. 위 동작은 같으나 다음과 같이 바꿀수 있다.  ] 
import { useState } from 'react';

function Hello02() {
    const [name, setName] = useState('kim');
      
    return (
        <div>
            <h1>state</h1>
            <h2 id="name"> {name} </h2>
            <button onClick={()=>{
                setName(name === "lee" ? 'kim' : 'lee');
            }}> changeName </button>
        </div>
    );
}

export default Hello02;

[4. App.js에서 여러번 호출하여 다른 동작을 하는지 확인 ]
import React from 'react';
import Hello from './component03/Hello';

function App() {
  return (
    <div className="App">
        <Hello />
        <Hello />
        <Hello />
    </div>
    );
}

export default App;

[4. 전달받은 props로 state를 변경하기: 카운터를 복습한 후 example로 하기]
1.
import React from 'react';
import Hello from './component03/HelloUserName';

function App() {
  return (
    <div className="App">
         <Hello age={30} />
    </div>
    );
}

export default App;

2.
export default function UserName({name}) {
    // 아무 기능도 없는 이름을 출력하는 컴포넌튿
    return <p>Hello, {name}</p>
}

3.
import { useState } from 'react';
import UserName from './UserName';

export default function Hello(props) {
    console.log( props );
    const [name, setName] = useState('jemicom');
    const [age, setAge] = useState(props.age);
    {/*// 새로운 state를 만들어 사용하여 전달받은 props를 변경할 수 있음*/ }
    return (
        <div>
            <h1>STATE</h1>
            <h2 id="name">{name}({age}세)</h2>
            <UserName name={name} />
            <button onClick={()=>{
                setName(name === "jemicom" ? "kim" : "jemicom" );
                setAge(age+1);
            }}>Change</button>
        </div>
    );
}

[example = counter ( 갱신 안되는 화면) ]
function App() {
  let count = 0; 
  const adding = () => {
     console.log( count++ );
  };
  return (
    <div className="App">
      <h1 id="Hello"> {count} </h1>
      <button onClick={ adding }>Click</button>
    </div>
  );
}

[counter : useState로 숫자 갱신해 보기2 ( 갱신 되는 화면)  ]
import React, { useState } from 'react';

function App() {
  let [ count, setCount ] = useState(0); 
  const adding = () => {  
     setCount( ++count ); // 코드순서가 바뀌면 콘솔이 2번찍힘
     console.log( count );
  };
  return (
    <div className="App">
      <h1 id="Hello"> {count} </h1>
      <button onClick={ adding }>Click</button>
    </div>
  );
}

export default App;

[useState와 컴포넌트로 제어하는 카운터]
import React, { Component, useState } from 'react';

function Counter(){
    let [ count, setCount ] = useState(0); 
        const adding = () => {  
            setCount( ++count ); // 코드순서가 바뀌면 콘솔이 2번찍힘
            console.log( count );
        };
    return (
        <div>
             <h1 id="Hello"> {count} </h1>
             <button onClick={ adding }>Click</button>
        </div>
    );
};

export default Counter;

[useState와 컴포넌트로 제어하는 카운터 : App.js]
import React, { useState } from 'react';
import Counter from './component03/Counter';

function App() {
  return (
    <div className="App">
      <Counter />
      <Counter />
      <Counter />
      <Counter />
    </div>
  );
}
export default App;
 
[props와 state를 사용한 카운트 : App.js]
import React, { useState } from 'react';
import Counter from './component03/Counter';

function App() {
  return (
    <div className="App">
      <Counter  counterName={'카운터'} />
      <Counter  counterName={'계산기'}  />
      <Counter />
    </div>
  );
}

export default App;
[props와 state를 사용한 카운트 : Counter.js]
import React, { Component, useState } from 'react';

function Counter(props){
    let [ count, setCount ] = useState(0); 
        const adding = () => {  
            setCount( ++count ); // 코드순서가 바뀌면 콘솔이 2번찍힘
            console.log( count );
        };
    return (
        <div>
             <h1 id="Hello"> { props.counterName } {count} </h1>
             //<h1 id="Hello"> { props.counterName || '기본값' } {count} </h1>
             // 전달되는 값이 있으면 전달되는 값을 사용하고 
             // 없으면 '기본값'을 사용함 
             <button onClick={ adding }>Click</button>
        </div>
    );
};

export default Counter;

[useEffect]
import React from 'react';
import { useEffect } from 'react';

function App() {
  useEffect(()=>{
    console.log('effect');
    // 갱신하고 싶은 기능을 넣어줄것 
    // 생명주기 함수 componentDidMount() 같이 실행되는 것으로
    // 최초 페이지 로딩시 실행 되고 다시 useEffect() 실행되어 2번 실행된다. 
    /*
    index.js에서 처리하면 1번 실행됨 
    ReactDOM.render(
            <App />,
        document.getElementById('root')
    );
    */
  })
  console.log('rendering')
  return (
    <div className="App">
        <h1> kim </h1>
    </div>
  );
}

export default App;

[useEffect로 갱신되는 데이터와 갱신되지않는 카운터]
import React, { useEffect, useState } from 'react';

function App() {
  const [count, setCount] = useState(0);
  const [ kim, setKim] = useState(0);
  useEffect(() => {
    console.log(count);
    //console.log(kim);
  }, [count, kim ])

  useEffect(() => {
    console.log('first rendering')
  }, []);
  const increment = () => {
    setCount(count + 1);
  };
  return (
    <div className="App">
      <h1> counter </h1>
      <button onClick={increment}>Click</button>
      <button onClick={() => setKim(kim + 1)}>Click1</button>
    </div>
  );
}

export default App;

[boolean 조절하기 ]
import React, { useState, useEffect } from 'react';

function App() {
  const [condition, setCondition] = useState(false);
  function toggle(){
    const newCondition = condition === true ? false : true;
   
    setCondition(newCondition);
    console.log( newCondition )
  }
 
  return (
    <div className="App">
      <h1> Toggle State </h1>
      <div>
        {condition ? <div>ture</div> :<div>false</div> }     
      </div>
      <button onClick={toggle}>Toggle</button>
    </div>
  );
}

export default App;